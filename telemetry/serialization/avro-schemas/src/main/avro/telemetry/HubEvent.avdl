@namespace("ru.yandex.practicum.kafka.telemetry.event")
protocol HubEventProtocol {

	// Типы устройств
	enum DeviceTypeAvro {
		MOTION_SENSOR,
		TEMPERATURE_SENSOR,
		LIGHT_SENSOR,
		CLIMATE_SENSOR,
		SWITCH_SENSOR
	}

	// Типы условий для сценариев
	enum ConditionTypeAvro {
		MOTION,
		LUMINOSITY,
		SWITCH,
		TEMPERATURE,
		CO2LEVEL,
		HUMIDITY
	}

	// Операции сравнения в условиях
	enum ConditionOperationAvro {
		EQUALS,
		GREATER_THAN,
		LOWER_THAN
	}

	// Типы действий устройства в сценариях
	enum ActionTypeAvro {
		ACTIVATE,
		DEACTIVATE,
		INVERSE,
		SET_VALUE
	}

	// Событие добавления устройства
	record DeviceAddedEventAvro {
		string id;                 // идентификатор устройства
		DeviceTypeAvro type;       // тип устройства
	}

	// Событие удаления устройства
	record DeviceRemovedEventAvro {
		string id;                 // идентификатор устройства
	}

	// Условие активации сценария
	record ScenarioConditionAvro {
		string sensor_id;                        // id устройства
		ConditionTypeAvro type;                  // тип условия
		ConditionOperationAvro operation;        // операция сравнения
		union { null, int, boolean } value = null; // значение (может быть null / int / boolean)
	}

	// Действие над устройством в сценарии
	record DeviceActionAvro {
		string sensor_id;            // id устройства
		ActionTypeAvro type;         // тип действия
		int? value = null;           // опциональное значение (например, уровень)
	}

	// Событие добавления сценария
	record ScenarioAddedEventAvro {
		string name;                                 // уникальное имя сценария
		array<ScenarioConditionAvro> conditions;     // условия
		array<DeviceActionAvro> actions;             // действия
	}

	// Событие удаления сценария
	record ScenarioRemovedEventAvro {
		string name;                  // имя сценария
	}

	// Событие хаба
	record HubEventAvro {
		string hub_id;                // id хаба
		timestamp_ms timestamp;       // метка времени события
		union {
			DeviceAddedEventAvro,
			DeviceRemovedEventAvro,
			ScenarioAddedEventAvro,
			ScenarioRemovedEventAvro
		} payload;                    // конкретное событие
	}
}
